{"ast":null,"code":"import _objectSpread from \"C:/Users/Ameet Khemani/Downloads/New folder (2)/React-Book-Store-Solution-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ameet Khemani\\\\Downloads\\\\New folder (2)\\\\React-Book-Store-Solution-main\\\\src\\\\pages\\\\HomePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport BookList from '../components/Book/BookList';\nimport { AuthContext } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomePage = () => {\n  _s();\n  const {\n    auth\n  } = useContext(AuthContext);\n  const [books, setBooks] = useState([]);\n  useEffect(() => {\n    const fetchBooks = async () => {\n      try {\n        const response = await axios.get('http://localhost:4000/books');\n        setBooks(response.data);\n      } catch (error) {\n        console.error('Error fetching books:', error);\n      }\n    };\n    fetchBooks();\n  }, []);\n  const addToCart = async book => {\n    if (!auth) return;\n    try {\n      const response = await axios.get(\"http://localhost:4000/cart?userId=\".concat(auth.id));\n      let userCart = response.data[0];\n      if (!userCart) {\n        // Create a new cart if it doesn't exist\n        userCart = {\n          userId: auth.id,\n          books: [_objectSpread(_objectSpread({}, book), {}, {\n            quantity: 1\n          })]\n        };\n        await axios.post('http://localhost:4000/cart', userCart);\n      } else {\n        // Check if the book is already in the cart\n        const bookIndex = userCart.books.findIndex(cartBook => cartBook.id === book.id);\n        if (bookIndex > -1) {\n          // Increase the quantity of the existing book\n          userCart.books[bookIndex].quantity += 1;\n        } else {\n          // Add the new book with quantity 1\n          userCart.books.push(_objectSpread(_objectSpread({}, book), {}, {\n            quantity: 1\n          }));\n        }\n        await axios.put(\"http://localhost:4000/cart/\".concat(userCart.id), userCart);\n      }\n      alert('Book added to cart!');\n    } catch (error) {\n      console.error('Error adding book to cart:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Welcome to the Online Bookstore\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(BookList, {\n      books: books,\n      addToCart: (auth === null || auth === void 0 ? void 0 : auth.role) === 'user' ? addToCart : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(HomePage, \"vZGXAtCmpO2OF1WlOmHscZPiD8k=\");\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","BookList","AuthContext","jsxDEV","_jsxDEV","HomePage","_s","auth","books","setBooks","fetchBooks","response","get","data","error","console","addToCart","book","concat","id","userCart","userId","_objectSpread","quantity","post","bookIndex","findIndex","cartBook","push","put","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","role","_c","$RefreshReg$"],"sources":["C:/Users/Ameet Khemani/Downloads/New folder (2)/React-Book-Store-Solution-main/src/pages/HomePage.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport BookList from '../components/Book/BookList';\r\nimport { AuthContext } from '../App';\r\n\r\nconst HomePage = () => {\r\n    const { auth } = useContext(AuthContext);\r\n    const [books, setBooks] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchBooks = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:4000/books');\r\n                setBooks(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching books:', error);\r\n            }\r\n        };\r\n\r\n        fetchBooks();\r\n    }, []);\r\n\r\n    const addToCart = async (book) => {\r\n        if (!auth) return;\r\n\r\n        try {\r\n            const response = await axios.get(`http://localhost:4000/cart?userId=${auth.id}`);\r\n            let userCart = response.data[0];\r\n\r\n            if (!userCart) {\r\n                // Create a new cart if it doesn't exist\r\n                userCart = {\r\n                    userId: auth.id,\r\n                    books: [{ ...book, quantity: 1 }]\r\n                };\r\n                await axios.post('http://localhost:4000/cart', userCart);\r\n            } else {\r\n                // Check if the book is already in the cart\r\n                const bookIndex = userCart.books.findIndex(cartBook => cartBook.id === book.id);\r\n\r\n                if (bookIndex > -1) {\r\n                    // Increase the quantity of the existing book\r\n                    userCart.books[bookIndex].quantity += 1;\r\n                } else {\r\n                    // Add the new book with quantity 1\r\n                    userCart.books.push({ ...book, quantity: 1 });\r\n                }\r\n\r\n                await axios.put(`http://localhost:4000/cart/${userCart.id}`, userCart);\r\n            }\r\n\r\n            alert('Book added to cart!');\r\n        } catch (error) {\r\n            console.error('Error adding book to cart:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Welcome to the Online Bookstore</h2>\r\n            <BookList books={books} addToCart={auth?.role === 'user' ? addToCart : null} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}